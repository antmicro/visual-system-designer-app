image: debian:bookworm

stages:
  - prepare-workspace
  - validate
  - aggregate-results

.common_only: &common_only
  only:
    - main
    - dev
    - merge_requests

.install-requirements: &install-requirements |-
    apt-get -y update &> /dev/null
    apt-get -y install npm libarchive-tools curl git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget python3-venv python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file make gcc gcc-multilib g++-multilib libsdl2-dev mono-complete

# Initialize python venv and install VSD app
.init-venv: &init-venv |-
    python3 -m venv .venv
    source .venv/bin/activate
    pip install -e .

.init-workspace: &init-workspace |-
    export VSD_WORKSPACE=$(pwd)/workspace
    export ZEPHYR_SDK_INSTALL_DIR=$(vsd info | grep ZEPHYR_SDK | sed 's/ZEPHYR_SDK_INSTALL_DIR: //')

    # Move SDK to proper directory
    mv zephyr-sdk ${ZEPHYR_SDK_INSTALL_DIR}

    # Ensure that Zephyr SDK is setup correctly
    pushd ${ZEPHYR_SDK_INSTALL_DIR}
    ./setup.sh -t all -h -c
    popd

    # This call to vsd init is needed to install Zephyr requirements
    vsd init workspace



setup-workspace:
  <<: *common_only
  stage: prepare-workspace
  tags: ['ace-x86_64']
  before_script:
    - *install-requirements
    - *init-venv
    - echo "progress=dot:giga" > ${HOME}/.wgetrc
  script:
    # Setup workspace
    - vsd init workspace
    # Prepare archive that will be saved to artifacts
    - export VSD_WORKSPACE=workspace
    - 'export ZEPHYR_SDK_INSTALL_DIR=$(vsd info | grep ZEPHYR_SDK | sed "s/ZEPHYR_SDK_INSTALL_DIR: //")'
    # Copy Zephyr SDK to include it in artifacts
    - mv ${ZEPHYR_SDK_INSTALL_DIR} zephyr-sdk
  artifacts:
    paths:
      - workspace
      - zephyr-sdk
    when: always


validate-setup:
  <<: *common_only
  stage: validate
  tags: ['ace-x86_64']
  dependencies: [setup-workspace]
  before_script:
    - *install-requirements
    - *init-venv
    - *init-workspace
  script:
    # Build app on demo graph
    - vsd prepare-zephyr-board demo/stm32-led-thermometer.json
    - vsd build-zephyr demo-blinky-temp
    - vsd prepare-renode-files demo-blinky-temp

    # We expect that the simulation will succeed and run forever. In that case, timeout
    # command would kill the simulation after 20 seconds and return 124 indicating timeout.
    - timeout --signal=SIGINT 20 vsd simulate demo-blinky-temp || test $? -eq 124
  artifacts:
    paths:
      - workspace/builds/demo-blinky-temp
    when: always


validate-targets:
  <<: *common_only
  stage: validate
  tags: ['ace-x86_64']
  dependencies: [setup-workspace]
  parallel: 6
  before_script:
    - *install-requirements
    - *init-venv
    - *init-workspace
    - pip install -r tools/requirements.txt
  script:
    - ./tools/validate.py all-socs --chunk-total ${CI_NODE_TOTAL} --chunk-id $((${CI_NODE_INDEX} - 1)) --seed ${CI_COMMIT_SHA} --output validate-${CI_NODE_INDEX}.json
  artifacts:
    paths:
      - validate.log
      - validate-*.json
      - workspace/builds
    when: always


aggregate-results:
  <<: *common_only
  stage: aggregate-results
  tags: ['ace-x86_64']
  dependencies: [validate-targets]
  before_script:
    - apt-get -y update &> /dev/null
    - apt-get -y install git python3 python3-venv python3-pip &> /dev/null
    - *init-venv
    - pip install -r tools/requirements.txt
  script:
    ./tools/validate.py print-results validate-*.json --output results.json
  artifacts:
    paths:
      - results.json
      - workspace/builds
